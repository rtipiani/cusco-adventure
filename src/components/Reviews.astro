---
import { reviewsCarouselData, type Lang } from "../data/reviews"; // Importa Lang y las reseñas

export interface Props {
  	lang: Lang;
}

const { lang } = Astro.props;
const reviews = reviewsCarouselData[lang]; // Utiliza reviews según el idioma
---
<section class="bg-white text-gray-800 py-16 px-6 md:px-12 max-w-7xl mx-auto space-y-12">
  	<h2 class="text-3xl md:text-4xl font-bold text-center text-[#19470c]">
    	{lang === 'es' ? 'Nuestras Experiencias' : 'Our Experiences'}
  	</h2>

  	<div class="relative overflow-hidden" data-reviews-carousel>
    	<div data-reviews-track class="flex transition-transform duration-700 ease-in-out" style="will-change: transform;">
      		{reviews.map((item) => (
        		<article data-card-carousel class="w-full md:w-1/3 flex-shrink-0 px-3">
          			<div class="bg-gray-50 rounded-2xl shadow-lg p-6 space-y-4 text-center">
            			<img src={item.imagen} alt={item.alt} class="w-28 h-28 mx-auto rounded-full object-cover shadow-md" />
            			<h4 class="text-lg font-semibold text-[#19470c]">{item.titulo}</h4>
            			<p class="text-sm text-gray-500">{item.paquete}</p>
            			<p class="text-gray-600">Por: {item.autor} ({item.fecha})</p>
            			<p class="text-yellow-500 text-lg">{"★".repeat(item.estrellas)}</p>
            			<p class="text-gray-700 text-sm">{item.descripcion}</p>
          			</div>
        		</article>
      		))}
    	</div>

    	<button data-reviews-prev class="absolute left-4 top-1/2 -translate-y-1/2 bg-[#19470c]/70 text-white p-3 rounded-full shadow-lg hover:bg-[#19470c] transition hidden md:flex items-center justify-center backdrop-blur-sm" aria-label="Anterior">
      		<i class="fas fa-chevron-left"></i>
    	</button>

    	<button data-reviews-next class="absolute right-4 top-1/2 -translate-y-1/2 bg-[#19470c]/70 text-white p-3 rounded-full shadow-lg hover:bg-[#19470c] transition hidden md:flex items-center justify-center backdrop-blur-sm" aria-label="Siguiente">
      		<i class="fas fa-chevron-right"></i>
    	</button>

    	<div data-reviews-dots class="flex justify-center mt-6 gap-2"></div>
  	</div>
</section>

<script is:inline>
  	document.addEventListener('DOMContentLoaded', () => {
    	document.querySelectorAll('[data-reviews-carousel]').forEach(root => {
      		const track = root.querySelector('[data-reviews-track]');
      		const prev = root.querySelector('[data-reviews-prev]');
      		const next = root.querySelector('[data-reviews-next]');
      		const dotsContainer = root.querySelector('[data-reviews-dots]');
      		const cards = track.querySelectorAll('[data-card-carousel]');
      		const total = cards.length;

      		const visible = 3;
      		let index = 0;

      		const pages = Math.ceil(total / visible);
      		const dots = [];
      		for (let i = 0; i < pages; i++) {
        		const dot = document.createElement('button');
        		dot.className = "w-3 h-3 rounded-full bg-gray-300 hover:bg-[#19470c] transition";
        		if (i === 0) dot.classList.add("bg-[#19470c]");
        		dotsContainer.appendChild(dot);
        		dots.push(dot);
        		dot.addEventListener('click', () => {
          			index = i;
          			update();
          			restartAuto();
        		});
      		}

      		const update = () => {
        		track.style.transform = `translateX(-${index * 100}%)`;
        		dots.forEach((d, i) =>
          			d.classList.toggle("bg-[#19470c]", i === index)
        		);
      		};

      		const scrollNext = () => {
        		index = (index + 1) % pages;
        		update();
      		};

      		const scrollPrev = () => {
        		index = (index - 1 + pages) % pages;
        		update();
      		};

      		prev?.addEventListener('click', () => { scrollPrev(); restartAuto(); });
      		next?.addEventListener('click', () => { scrollNext(); restartAuto(); });

      		let timer = null;
      		const startAuto = () => {
        		stopAuto();
        		timer = setInterval(scrollNext, 5000);
      		};
      		const stopAuto = () => timer && clearInterval(timer);
      		const restartAuto = () => { stopAuto(); startAuto(); };

      		root.addEventListener('mouseenter', stopAuto);
      		root.addEventListener('mouseleave', startAuto);

      		update();
      		startAuto();
    	});
  	});
</script>